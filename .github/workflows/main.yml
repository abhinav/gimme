name: main
on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
    branches: [main]
env:
  GO_BOOTSTRAP_VERSION: 1.17.13
  SHELLCHECK_URL: "https://github.com/koalaman/shellcheck/releases/download/v0.7.1/shellcheck-v0.7.1.linux.x86_64.tar.xz"
  SHFMT_URL: "https://github.com/mvdan/sh/releases/download/v3.5.1/shfmt_v3.5.1_linux_amd64"
jobs:
  build:
    strategy:
      matrix:
        env:
          - runner: ubuntu-latest
            goos: linux
            goarch: amd64
            target: native
        # TODO: more matrix entries
    runs-on: ${{ matrix.env.runner }}
    env:
      TARGET: ${{ matrix.env.target }}
      GOOS: ${{ matrix.env.goos }}
      GOARCH: ${{ matrix.env.goarch }}
    steps:
      - uses: actions/checkout@v3
      - run: printf 'GIMME_TMP=%s\n' "${RUNNER_TEMP}" | tee -a "${GITHUB_ENV}"
      - run: printf 'UNAME=%s\n' "$(uname | tr '[:upper:]' '[:lower:]')" | tee -a "${GITHUB_ENV}"
      - run: |
          GO_VERSIONS="$(sed -n -e '/^[^#]/p' < .testdata/sample-binary-$UNAME) $(sed -n -e '/^[^#]/p' < .testdata/source-$UNAME)"
          printf 'GO_VERSIONS=%s\n' "$(echo "${GO_VERSIONS}" | tr '\n' ' ')" | tee -a "${GITHUB_ENV}"
      - run: printf 'PATH=%s\n' "${HOME}/bin:${PATH}" | tee -a "${GITHUB_ENV}"
      - run: mkdir -p "${HOME}/bin"
      - run:
          if [ $UNAME = linux ] && [[ $(shellcheck --version | awk '/^version:/ { print $2 }') != 0.7.1 ]] ; then
            curl -sSL -o "${GIMME_TMP}/shellcheck.tar.xz" "${SHELLCHECK_URL}";
            tar -C "${HOME}/bin" --exclude="*.txt" --strip-components=1 -xf "${GIMME_TMP}/shellcheck.tar.xz";
            shellcheck --version;
          fi
      - run:
          if [ $UNAME = linux ] && [[ $(shfmt -version 2>/dev/null) != v3.5.1 ]] ; then
            curl -sSL "${SHFMT_URL}" -o "${HOME}/bin/shfmt";
            chmod +x "${HOME}/bin/shfmt";
            shfmt -version;
          fi
      - run: if [ $UNAME = linux ]; then make lint; fi
      - run: git diff --exit-code
      - run: git diff --cached --exit-code
      - run: ./gimme -h
      - run: ./gimme -V
      - run: ./runtests "${TARGET}" "${GO_BOOTSTRAP_VERSION}" ${GO_VERSIONS}
      - run: ./gimme -l
